# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.5)

# Set the name of the project and the programming language
project(<%= projectName %> C ASM)

# Set the MCU type and frequency
set(MCU "<%= mcu %>")
set(F_CPU "<%= fCpu %>UL")
set(PORT "/dev/ttyUSB0")

# Set the C compiler options
set(CMAKE_C_COMPILER "avr-gcc")
set(CMAKE_C_FLAGS "-mmcu=${MCU} -DF_CPU=${F_CPU} -Wall -Os")

# Set the C++ compiler options (if needed)
#set(CMAKE_CXX_COMPILER "avr-g++")
#set(CMAKE_CXX_FLAGS "-mmcu=${MCU} -DF_CPU=${F_CPU} -Wall -Os")

# Set the linker options
set(CMAKE_EXE_LINKER_FLAGS "-mmcu=${MCU}")

# Add the source files
add_executable(${PROJECT_NAME}.elf main.c)

# Specify the output file format
set_target_properties(${PROJECT_NAME}.elf PROPERTIES OUTPUT_FORMAT "elf32-avr")

# Convert the ELF file to a hex file
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD COMMAND avr-objcopy -O ihex ${PROJECT_NAME}.elf ${PROJECT_NAME}.hex)

# Convert the ELF file to a binary file
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD COMMAND avr-objcopy -O binary ${PROJECT_NAME}.elf ${PROJECT_NAME}.bin)

# Define a custom target to upload the binary file to the AVR device using avrdude
add_custom_target(upload
  COMMAND avrdude -p ${MCU} -c <%= programmerType %> -P ${PORT} -U flash:w:${PROJECT_NAME}.hex
  DEPENDS ${PROJECT_NAME}.bin
)
